<launch>

  <arg name="robot_namespace" default="/" />

  <arg name="sim" default="true" /> 
  <arg name="scan_topic" default="/scan"/>
  <arg name="laser_frame" default="base_laser"/>
  

  <!--for using velodyne, download and build velodyne_simulator from
      https://bitbucket.org/DataspeedInc/velodyne_simulator/src/master/-->
  <arg name="use_velodyne" default="true"/>

  <!-- -for husky model -->
  <arg name="x" default="0.0"/>
  <arg name="y" default="0.0"/>
  <arg name="z" default="0.0"/>
  <arg name="phi" default="0.0"/>


<!-- The following lines can be used when the localization is done using velodyne sensor
      data and there is no need for laserscan msg (from other LiDAR) in entire simulation
  <arg name="laser_enabled" default="false" if="$(arg use_velodyne)"/>
  <arg name="laser_enabled" default="true" unless="$(arg use_velodyne"/>
-->

  <arg name="laser_enabled" default="false" if="$(arg use_velodyne)"/>
  <arg name="laser_enabled" default="true" unless="$(arg use_velodyne)"/>

<!--   <arg name="laser_enabled" default="true"/> -->
  <arg name="kinect_enabled" default="false"/>
  <arg name="realsense_enabled" default="false"/>
  <arg name="velodyne_enabled" default="$(arg use_velodyne)"/>

  <!-- for mw mapping-->
  <arg name="odom_frame" default="odom" />
  <arg name="base_frame" default="base_link" />
  <arg name="map_frame" default="map" />
  
  <!-- for nav server-->
  <arg name="debug" default="false" />
  <arg name="respawn" value="true"/>

  <arg name="gui" default="true"/>


<!-- Global Param -->
  <param name="robot_description" command="$(find xacro)/xacro '$(find husky_description)/urdf/husky.urdf.xacro'
    robot_namespace:=$(arg robot_namespace)
    laser_enabled:=$(arg laser_enabled)
    kinect_enabled:=$(arg kinect_enabled)
    realsense_enabled:=$(arg realsense_enabled)
    velodyne_enabled:=$(arg velodyne_enabled)" />

  <rosparam command="load" file="$(find husky_control)/config/control.yaml" />

<!-- Gazebo world and robot-->
  <include file="$(find husky_gazebo)/launch/playpen.launch">
    <arg name="gui" value="$(arg gui)" />
    <arg name="use_sim_time" value="$(arg sim)"/>
  </include>
  
  <node name="spawn_husky_model" pkg="gazebo_ros" type="spawn_model"
      args="-x $(arg x) -y $(arg y) -z $(arg z) -urdf -param robot_description -model $(arg robot_namespace)" />


<!-- Rviz robot and map-->
  <node type="rviz" name="rviz" pkg="rviz" args="-d $(find mowito_husky)/rviz/nav_no_map.rviz" />
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

<!-- Husky Controller-->
  <node pkg="twist_mux" type="twist_mux" name="twist_mux">
    <rosparam command="load" file="$(find husky_control)/config/twist_mux.yaml" />
    <remap from="cmd_vel_out" to="husky_velocity_controller/cmd_vel"/>
  </node>

  <node name="base_controller_spawner" pkg="controller_manager" type="spawner"
      args="husky_joint_publisher husky_velocity_controller"/>
  
  <!-- robot_localization publishes odom data -->
  <node pkg="robot_localization" type="ekf_localization_node" name="ekf_localization">
    <rosparam command="load" file="$(find husky_control)/config/localization.yaml" />
    <remap from="/odometry/filtered" to="/odom"/>
  </node>

  <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">

        <remap from="cloud_in" to="/velodyne_points"/>
        <remap from="scan" to="/scan"/>
        <rosparam>
            # target_frame: camera_link # Leave disabled to output scan in pointcloud frame
            transform_tolerance: 0.01
            min_height: 0.0
            max_height: 1.0

            angle_min: -3.1416 # -M_PI/2
            angle_max: 3.1416 # M_PI/2
            angle_increment: 0.0174533333 # M_PI/360.0
            scan_time: 0.3333
            range_min: 0.45
            range_max: 10.0
            use_inf: true
            inf_epsilon: 1.0

            # Concurrency level, affects number of pointclouds queued for processing and number of threads used
            # 0 : Detect number of cores
            # 1 : Single threaded
            # 2->inf : Parallelism level
            concurrency_level: 1
        </rosparam>

    </node>

  <!-- NAVIGATION -->
  <!-- mapping node-->
   <node pkg="slam_toolbox" type="async_slam_toolbox_node" name="slam_toolbox" output="screen">
    <rosparam command="load" file="$(find mowito_husky)/config/slam_toolbox_config/slam_toolbox_mapping.yaml" />
  </node>


</launch>
